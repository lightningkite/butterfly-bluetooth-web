// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: BleServerDelegate.kt
// Package: com.lightningkite.butterfly.bluetooth
import { MutableObservableProperty } from 'butterfly-web/dist/observables/MutableObservableProperty'
import { Observable, SubscriptionLike, of as rxOf, throwError as rxThrowError } from 'rxjs'
import { xObservablePropertyObservableNNGet } from 'butterfly-web/dist/observables/ObservableProperty.ext'
import { BleCharacteristicDescription, BleCharacteristicProperties, BleDeviceInfo, BleProfileDescription, BleResponseException, BleServiceDescription } from './models'
import { AbstractDisposable } from 'butterfly-web/dist/rx/AbstractDisposable'
import { map as iterMap, toArray as iterToArray } from 'butterfly-web/dist/kotlin/lazyOp'
import { iterFlatMap as iterFlatMap, xMapMapValues } from 'butterfly-web/dist/kotlin/Collections'
import { BleResponseStatus } from 'butterfly-web/dist/bluetooth/BleServer'

//! Declares com.lightningkite.butterfly.bluetooth.BleServerDelegate
export interface BleServerDelegate extends SubscriptionLike {
    
    readonly profile: BleProfileDescription;
    
    onConnect(from: BleDeviceInfo): void 
    onDisconnect(from: BleDeviceInfo): void 
    onSubscribe(from: BleDeviceInfo, service: string, characteristic: string): Observable<Int8Array> 
    onRead(from: BleDeviceInfo, service: string, characteristic: string): Observable<Int8Array> 
    onWrite(from: BleDeviceInfo, service: string, characteristic: string, value: Int8Array): Observable<void> 
    
    
    
}

export namespace BleServerDelegate {
    //! Declares com.lightningkite.butterfly.bluetooth.BleServerDelegate.PerCharacteristic
    export class PerCharacteristic extends AbstractDisposable implements BleServerDelegate {
        public static implementsInterfaceComLightningkiteButterflyBluetoothBleServerDelegate = true;
        public static implementsInterfaceIoReactivexDisposablesDisposable = true;
        public readonly services: Map<string, PerCharacteristic.Service>;
        public constructor(services: Map<string, PerCharacteristic.Service>) {
            super();
            this.services = services;
            this.profile = new BleProfileDescription(xMapMapValues<string, BleServerDelegate.PerCharacteristic.Service, BleServiceDescription>(this.services, (it: [string, BleServerDelegate.PerCharacteristic.Service]): BleServiceDescription => new BleServiceDescription(it[1].debugName, it[1].primary, xMapMapValues<string, BleServerDelegate.PerCharacteristic.Delegate, BleCharacteristicDescription>(it[1].delegates, (it: [string, BleServerDelegate.PerCharacteristic.Delegate]): BleCharacteristicDescription => new BleCharacteristicDescription(it[1].debugName, it[1].properties)))));
        }
        
        public static constructorArrayPair(...pairs: [string, PerCharacteristic.Service][]) {
            let result = new PerCharacteristic(new Map(iterMap(pairs, (it: [string, BleServerDelegate.PerCharacteristic.Service]): [string, BleServerDelegate.PerCharacteristic.Service] => it)));
            
            return result;
        }
        public readonly profile: BleProfileDescription;
        
        
        
        
        
        
        public onConnect(from: BleDeviceInfo): void {
            for(const _x of iterFlatMap(this.services.entries(), (it: [string, BleServerDelegate.PerCharacteristic.Service]): Iterable<[string, BleServerDelegate.PerCharacteristic.Delegate]> => it[1].delegates.entries())) { 
                const it = _x;
                it[1].onConnect(from);
            };
        }
        
        public onDisconnect(from: BleDeviceInfo): void {
            for(const _x of iterFlatMap(this.services.entries(), (it: [string, BleServerDelegate.PerCharacteristic.Service]): Iterable<[string, BleServerDelegate.PerCharacteristic.Delegate]> => it[1].delegates.entries())) { 
                const it = _x;
                it[1].onDisconnect(from);
            };
        }
        
        public onSubscribe(from: BleDeviceInfo, service: string, characteristic: string): Observable<Int8Array> {
            return (((): (BleServerDelegate.PerCharacteristic.Delegate | null) => {
                        const temp173 = ((this.services.get(service) ?? null)?.delegates ?? null);
                        if(temp173 === null) { return null }
                        return (temp173.get(characteristic) ?? null)
            })()?.onSubscribe(from) ?? null) ?? rxThrowError(new BleResponseException(BleResponseStatus.attributeNotFound));
        }
        
        public onRead(from: BleDeviceInfo, service: string, characteristic: string): Observable<Int8Array> {
            return (((): (BleServerDelegate.PerCharacteristic.Delegate | null) => {
                        const temp175 = ((this.services.get(service) ?? null)?.delegates ?? null);
                        if(temp175 === null) { return null }
                        return (temp175.get(characteristic) ?? null)
            })()?.onRead(from) ?? null) ?? rxThrowError(new BleResponseException(BleResponseStatus.attributeNotFound));
        }
        
        public onWrite(from: BleDeviceInfo, service: string, characteristic: string, value: Int8Array): Observable<void> {
            return (((): (BleServerDelegate.PerCharacteristic.Delegate | null) => {
                        const temp177 = ((this.services.get(service) ?? null)?.delegates ?? null);
                        if(temp177 === null) { return null }
                        return (temp177.get(characteristic) ?? null)
            })()?.onWrite(from, value) ?? null) ?? rxThrowError(new BleResponseException(BleResponseStatus.attributeNotFound));
        }
        
        public onDispose(): void {
            for(const _x of iterFlatMap(this.services.entries(), (it: [string, BleServerDelegate.PerCharacteristic.Service]): Iterable<[string, BleServerDelegate.PerCharacteristic.Delegate]> => it[1].delegates.entries())) { 
                const it = _x;
                it[1].unsubscribe();
            };
        }
        
        
    }
    export namespace PerCharacteristic {
        //! Declares com.lightningkite.butterfly.bluetooth.BleServerDelegate.PerCharacteristic.Service
        export class Service {
            public readonly debugName: string;
            public readonly primary: boolean;
            public readonly delegates: Map<string, Delegate>;
            public constructor(debugName: string, primary: boolean, delegates: Map<string, Delegate>) {
                this.debugName = debugName;
                this.primary = primary;
                this.delegates = delegates;
            }
            
            public static constructorStringBooleanArrayPair(
                debugName: string,
                primary: boolean,
                    ...pairs: [string, Delegate][]
            ) {
                let result = new Service(debugName, primary, new Map(iterMap(pairs, (it: [string, BleServerDelegate.PerCharacteristic.Delegate]): [string, BleServerDelegate.PerCharacteristic.Delegate] => it)));
                
                return result;
            }
        }
    }
    export namespace PerCharacteristic {
        //! Declares com.lightningkite.butterfly.bluetooth.BleServerDelegate.PerCharacteristic.Delegate
        export interface Delegate extends SubscriptionLike {
            
            readonly debugName: string;
            
            readonly properties: BleCharacteristicProperties;
            
            onConnect(from: BleDeviceInfo): void 
            onDisconnect(from: BleDeviceInfo): void 
            onSubscribe(from: BleDeviceInfo): Observable<Int8Array> 
            onRead(from: BleDeviceInfo): Observable<Int8Array> 
            onWrite(from: BleDeviceInfo, value: Int8Array): Observable<void> 
        }
        
    }
    export namespace PerCharacteristic {
        //! Declares com.lightningkite.butterfly.bluetooth.BleServerDelegate.PerCharacteristic.FromProperty
        export class FromProperty extends AbstractDisposable implements Delegate {
            public static implementsInterfaceComLightningkiteButterflyBluetoothBleServerDelegatePerCharacteristicDelegate = true;
            public static implementsInterfaceIoReactivexDisposablesDisposable = true;
            public readonly debugName: string;
            public readonly property: MutableObservableProperty<Int8Array>;
            public readonly properties: BleCharacteristicProperties;
            public constructor(debugName: string, property: MutableObservableProperty<Int8Array>, properties: BleCharacteristicProperties = new BleCharacteristicProperties(true, true, true, true, true, true, undefined, undefined, undefined, undefined, undefined)) {
                super();
                this.debugName = debugName;
                this.property = property;
                this.properties = properties;
            }
            
            public onConnect(from: BleDeviceInfo): void {}
            public onDisconnect(from: BleDeviceInfo): void {}
            public onSubscribe(from: BleDeviceInfo): Observable<Int8Array> {
                return xObservablePropertyObservableNNGet(this.property);
            }
            
            public onRead(from: BleDeviceInfo): Observable<Int8Array> {
                return rxOf(this.property.value);
            }
            
            public onWrite(from: BleDeviceInfo, value: Int8Array): Observable<void> {
                this.property.value = value;
                return rxOf(undefined);
            }
            
            public onDispose(): void {}
        }
    }
}
